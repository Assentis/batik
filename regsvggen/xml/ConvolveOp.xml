	<test title="ConvolveOp Testing">
	<description>
		This test validates the convertion of Java 2D ConvolveOp
		into an SVG filter.
	</description>
	<description>
		It uses multiple common kernels: blur, edge detection,
		sharpening and embossing.
	</description>
	<javaCode>
		<![CDATA[
		g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
											 RenderingHints.VALUE_ANTIALIAS_ON);	
	
		AffineTransform defaultTransform = g.getTransform();

		// 
		// Load Image
		//
		//	Image image = Toolkit.getDefaultToolkit().createImage("/work/doc/svg/src/usecases/html/images/vangogh.jpg");
		Image image = Toolkit.getDefaultToolkit().createImage("/work/doc/svg/src/usecases/html/images/convolveImage.png");

		MediaTracker tracker = new MediaTracker(new Button(""));
		tracker.addImage(image, 0);
		try{
			tracker.waitForAll();
		}catch(InterruptedException e){
			tracker.removeImage(image);
			image = null;
		}finally {
			if(image != null)
				tracker.removeImage(image);
			if(tracker.isErrorAny())
				image = null;
			if(image != null){
				if(image.getWidth(null)<0 ||
					 image.getHeight(null)<0)
					image = null;
			}
		}

		if(image == null){
			throw new Error("Could not load image");
		}

		BufferedImage bi = new BufferedImage(image.getWidth(null),
																				 image.getHeight(null), BufferedImage.TYPE_INT_ARGB);
		Graphics2D ig = bi.createGraphics();
		ig.drawImage(image, 0, 0, null);
		
		// 
		// List of kernels and descriptions
		//
		float k[][] = {
										// Blur
										{ 1f/9, 1f/9, 1f/9,
											1f/9, 1f/9, 1f/9,
											1f/9, 1f/9, 1f/9 },

										// Edge Detection
										{ -1, -1, -1, 
											-1, 8, -1,
											-1, -1, -1 },

										// Sharpening
										{ -1, -1, -1,
											-1, 9, -1,
											-1, -1, -1 },

										// Embossing
										{ 2, 0, 0,
											 0, 1, 0,
											 0, 0, -2 },

										// Vertical blur
										{ 1f/3, 1f/3, 1f/3 },

										// Horizontal blur
										{ 1f/3, 1f/3, 1f/3 }
		};

		// Kernel descriptions
		String desc[] = { "Blur (3x3)",
											"Edge Detection (3x3)",
											"Sharpening (3x3)",
											"Embossing (3x3)",
											"Horizontal blur (3x1)",
											"Vertical blur (1x3)"
		};

		// Kernel sizes
		int ks[][] = { { 3, 3 },
									 { 3, 3 },
									 { 3, 3 },
									 { 3, 3 },
									 { 3, 1 },
									 { 1, 3 } };

		g.setPaint(Color.black);
		int curHeight = 0;
		int maxHeight = 300;

		for(int i=0; i<k.length; i++){
			if(curHeight + 30 + bi.getHeight() > maxHeight){
				g.translate(150, -curHeight);
				curHeight = 0;
			}

			g.drawString(desc[i], 10, 20);
			Kernel kernel = new Kernel(ks[i][0], ks[i][1], k[i]);
			ConvolveOp convolveOp = new ConvolveOp(kernel);
			g.drawImage(bi, convolveOp, 10, 30);
		  g.translate(0, bi.getHeight() + 30);
			curHeight += bi.getHeight() + 30;
		}		
    ]]>
  </javaCode>
</test>
