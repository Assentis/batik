<?xml version="1.0"?>
<!DOCTYPE document SYSTEM "./dtd/document-v10.dtd">

<!-- ====================================================================== -->
<!-- Copyright (C) The Apache Software Foundation. All rights reserved.     -->
<!--                                                                        -->
<!-- This software is published under the terms of the Apache Software      -->
<!-- License version 1.1, a copy of which has been included with this       -->
<!-- distribution in  the LICENSE file.                                     -->
<!-- ====================================================================== -->

<!-- ====================================================================== -->
<!-- author Thomas.DeWeese@kodak.com                                        -->
<!-- version $Id$ -->
<!-- ====================================================================== -->

<document>
    <header>
        <title>Extending Batik</title>
        <subtitle>Possible extensions</subtitle>
        <authors>
            <person name="Thomas DeWeese" email="thomas.deweese@kodak.com"/>
        </authors>
    </header>

    <body>
        <s1 title="Introduction">
            <p>The goal of this section is to provide an overview of
               the built in extension mechanisms in Batik.  As an open
               source project, people can of course make any extension
               they feel is interesting, however Batik has been
               designed with several forms of extension in mind.</p>

            <p>The main areas extension are anticipated are:</p>
            <ul>
                <li><link href="#customXMLTags"> 
                    Support for custom XML Tags
                    </link></li>
                <li><link href="#imageTagFormats"> 
                    Support for new file formats in the 'image' tag.
                    </link></li>
                <li><link href="#urlProtocols">
                    Support for new protocols in URL references.
                    </link></li>
                <li><link href="#transcoders">
                    Support for new Transcoders.
                    </link></li>
            </ul>

            <p>
            In general extensions are done throught the Service
            Provider Interface mechanism as described in the 
            <link href="http://java.sun.com/j2se/1.3/docs/guide/jar/jar.html#Service Provider">
            Jar file</link> documentation.
            </p>

            <p>
            This allows for the extension of Batik simply by adding a
            new jar file(s) to the class path.  
            </p>

            <note>
            If you feel that we have overlooked an important area for
            extension please let your feelings be known on the mailing-lists.
            </note>
        </s1>

        <anchor id="customXMLTags" />
        <s1 title="Custom XML Tags">
            <p>
            First one must ask "What does it mean to support custom 
            XML tags?"
            </p>

            <p>
            If your only interest if for the custom tags to appear in
            the SVG DOM tree, you need do nothing more than provide
            appropriate namespacing and DTD(s) (ie. simply make your
            new content well formed and/or valid XML).  Batik will
            ignore the branches of the DOM that it doesn't understand.
            </p>

            <p>
            If your interest is in having the new tag participate in
            or affect the rendering or transcoding operations then you
            must inform the bridge package about your new tags.  The
            bridge package is responsible for creating and maintaining
            elements in the GVT tree from the coresponding element in
            the SVG DOM.  The GVT tree is used for all
            rendering/transcoding operations.
            </p>

            <p>
            The key class for this conversion is the BridgeContext
            class.  This class maintains an association between a tag
            name with namespace and a bridge instance that will handle
            it.  The work of constructing the proper entities in the
            GVT tree is then defered to the Bridge instance.
            </p>

            <p>
            The Bridge interface it's self is a simple interface that
            includes methods to get the namespace and local name of
            the tag the bridge is to be used for.  This interface is
            then extended for each of the major concepts present in
            SVG:
            </p>
            <ul>
                <li>
                GraphicsNodeBridge - These are probably the most
                common SVG elements they represent graphic elements in
                what I'll call the "visible" SVG tree. These are the
                elements most other bridges modify in some way
                (by cliping, masking, filtering, etc).
                <br/>
                Examples of existing tags: svg, g, path, rect.
                </li>

                <li>
                FilterBridge - Handles the SVG 'filter' element.  If
                you wanted to implement a new tag that could be
                referenced from the 'filter' attribute on an SVG
                graphics node then you would need to subclass this
                bridge.  However adding new types of filters to the
                existing SVG 'filter' element is accomplished via the
                FilterPrimitiveBridge.
                <br/>
                Example of existing tag: filter
                </li>

                <li>
                FilterPrimitiveBridge - Constructs an element in the
                filter chain applied to a SVG graphics node.
                <br/>
                Examples of existing tags: feBlend, feCompose, ...
                </li>

                <li>
                PaintBridge - Constructs a java Paint object to be used
                in filling or stroking graphic elements.  
                <br/>
                Examples of existing tags: gradient, pattern.
                </li>

                <li>
                ClipBridge - Constructs a ClipRable to apply to a
                Graphics Node. 
                <br/>
                Example of existing tag: clip-path.
                </li>

                <li>
                MarkerBridge - Constructs a Marker for annotating the
                path of a GraphicsNode.
                <br/>
                Example of existing tag: marker
                </li>

                <li>
                MaskBridge - Constructs a Mask Filter to apply to 
                a Graphics Node. 
                <br/>
                Example of existing tag: mask.
                </li>
            </ul>
        </s1>

        <anchor id="imageTagFormats" />
        <s1 title="New File Formats">
        <p>
        When Batik encounters an 'image' element and it determines the
        element does not reference an SVG file. It defers the loading
        of the referenced image to
        org.apache.batik.ext.awt.image.spi.ImageTagRegistry.  This
        class maintains a list of RegistryEntries, generally one for
        each format.
        </p>

        <p>
        Since the formats supported natively by Batik are also
        implemented through this mechanism. The JPEGRegistryEntry and
        PNGRegistryEntry should be used as good references for
        extensions.
        </p>

          <s2 title="RegistryEntry">
          <p>
          There are currently two flavors of RegistryEntry:
          </p>
  
          <ul>
             <li>
             URLRegistryEntry - These take a ParsedURL and try to decide
             if the URL is intended for them.  This group is mostly
             intended to handle alternate network protocols.  It can
             also be useful for interfacing with librarys that want a
             URL instead of a stream.
             </li>
  
             <li>
             StreamRegistryEntry - These work with a markable
             InputStream. This is the prefered form of registry entry as
             it generally avoids opening a potentially expensive
             connection multiple times, instead it opens the stream
             once and relys on mark and reset to allow entries to
             check the stream.
             </li>
  
          </ul>
          </s2>        

          <s2 title="Helper classes">
          <p>
          There exists quite a number of classes to assist in implementing
          a RegistryEntry.  It is strongly recommended that you review these
          classes and make use of them where appropriate.  They will likely
          save you time and improve the integration with Batik.
          </p>
          <ul>
             <li> 
             MagicNumberRegistryEntry - An abstract class that can
             handle the isCompatibleStream method for formats that make
             use of "magic numbers".  Magic numbers are a well known
             sequence of bytes at a well known offset in the file.
             </li>
  
             <li>
             RedRable - This takes any java.awt.image.RenderedImage and
             wraps it into a 'Filter' (Batik's subclass of RenderableImage).
             This is extreamly useful for 'single resolution' file formats.
             </li> 
  
             <li>
             DeferRable - This allows one to load the image in a background
             thread, rather than hold up the construction of the GVT tree
             while reading the image (useful since reading the image is
             generally I/O bound, so it makes a good background task).  This
             is used by all the current Image readers.
             </li> 
  
             <li>
             AbstractRable - An abstract base class that makes it 
             relatively easy to implement the Filter interface.
             </li> 
  
             <li>
             AbstractRed - An abstract base class that makes it 
             relatively easy to implement the CacheableRed interface
             (Batik's subclass of RenderedImage).
             </li> 
          </ul>
          </s2>
        </s1>

        <anchor id="urlProtocols" />
        <s1 title="New URL Protocols">
        <p>
        For a variety of reasons (not the least of which is the heavy 
        use of the 'data:' protocol in SVG).  Several parts of Batik use
        what we call a "ParsedURL" instead of the JDK's java.net.URL class.
        </p>
        
        <p>
        This class offers a few advantages over the JDK's URL class.
        First, it is designed to make minimal use of exceptions, so
        it is possible to use it to parse a malformed URL and get 
        "the good parts".  Second, it is extensible, so support for
        new protocols can be added, even protocols that change the
        normal parsing rules for URLs (such as our friend the 'data' protocol).
        Third it can automatically check a stream when opened for common 
        compression types and decode them for you (this behaviour can also 
        be bypassed if needed).
        </p>
        
        <p>
        The service class is org.apache.batik.util.ParsedURLProtocolHandler.
        This interface consists of three methods, one returns the
        protocol to be handled, one is for parsing absolute URL string and one
        is for parsing relative URL strings. Both the parsing methods return 
        a ParsedURLData or a subclass there of.
        </p>
        
        <p>
        The ParsedURLData class holds all the data and implements the
        stream commands for the ParsedURL class.  This allows 
        ProtocolHandlers to return custom subclasses for particular protocols.
        </p>
        </s1>

        <anchor id="transcoders" />
        <s1 title="New Transcoders">
        </s1>
    </body>
</document>