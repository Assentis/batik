<?xml version="1.0"?>
<!DOCTYPE document SYSTEM "./dtd/document-v10.dtd">

<!-- ========================================================================= -->
<!-- Copyright (C) The Apache Software Foundation. All rights reserved.        -->
<!--                                                                           -->
<!-- This software is published under the terms of the Apache Software License -->
<!-- version 1.1, a copy of which has been included with this distribution in  -->
<!-- the LICENSE file.                                                         -->
<!-- ========================================================================= -->

<!-- ========================================================================= -->
<!-- author shillion@ilog.fr                                                     -->
<!-- version $Id$ -->      
<!-- ========================================================================= -->
<document>
  <header>
    <title>Scripting With Java</title>
    <authors>
      <person name="Stephane Hillion" email="shillion@ilog.fr"/>
    </authors>
  </header>

  <body>
    <s1 title="How to manipulate a JSVGCanvas DOM">
      <p>
      The follow code template demonstrates how to manipulate an SVG
      document displayed in a JSVGCanvas directly from a Java program.
      </p>
      <p>
      Notices that you don't have to worry about the graphics updates:
      each event dispatch updates the canvas if needed.
      </p>
<source>
import java.awt.event.WindowEvent;
import javax.swing.JFrame;
import org.apache.batik.swing.JSVGCanvas;
import org.apache.batik.swing.svg.SVGLoadEventDispatcherAdapter;
import org.apache.batik.swing.svg.SVGLoadEventDispatcherEvent;
import org.apache.batik.script.Window;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.events.Event;
import org.w3c.dom.events.EventListener;
import org.w3c.dom.events.EventTarget;

public class SVGApplication {
    public static void main(String[] args) {
        new SVGApplication();
    }

    JFrame frame;
    JSVGCanvas canvas;
    Document document;
    Window window;

    public SVGApplication() {
        frame = new JFrame();
        canvas = new JSVGCanvas();
        // Forces the canvas to always be dynamic even if the current
        // document does not contain scripting or animation.
        canvas.setDocumentState(JSVGCanvas.ALWAYS_DYNAMIC);
        canvas.addSVGLoadEventDispatcherListener
            (new SVGLoadEventDispatcherAdapter() {
                    public void svgLoadEventDispatchStarted
                        (SVGLoadEventDispatcherEvent e) {
                        // At this time the document is available...
                        document = canvas.getSVGDocument();
                        // ...and the window object too.
                        window = canvas.getUpdateManager().
                            getScriptingEnvironment().createWindow();
                        // Registers the listeners on the document
                        // just before the SVGLoad event is
                        // dispatched.
                        registerListeners();
                        // It is time to pack the frame.
                        frame.pack();
                    }
                });
        
        frame.addWindowListener(new WindowAdapter() {
                public void windowOpened(WindowEvent e) {
                    // Loads the base document now.
                    canvas.setURI("doc.svg");
                }
            });

        frame.getContentPane().add(canvas);
        frame.setSize(800, 600);
        frame.show();
    }

    public void registerListeners() {
        // Gets an element from the loaded document.
        Element elt = document.getElementById("elt-id");

        // Adds a 'onload' listener
        ((EventTarget)elt).addEventListener("SVGLoad",
                                            new OnLoadAction(),
                                            false);
        // Adds a 'onclick' listener
        ((EventTarget)elt).addEventListener("click",
                                            new OnClickAction(),
                                            false);
    }

    public class OnLoadAction implements EventListener {
        public void handleEvent(Event evt) {
            // Make some action here...
            
            // For example start an animation loop:
            window.setInterval(new Animation(), 50);
        }
    }

    public class OnClickAction implements EventListener {
        public void handleEvent(Event evt) {
            // Make some actions here...
        }
    }

    public class Animation implements Runnable {
        public void run() {
            // Insert animation code here...
        }
    }

}
</source>
    </s1>
    <s1 title="Writing thread-safe code">
      <p>
      The DOM listeners registered on the SVG document are called from
      the canvas update thread. To avoid race conditions do not manipulate
      the DOM tree from another thread.<br/>
      The way to switch from an external thread to the canvas update
      thread is to use the following code:
      </p>
<source>
// Returns immediately
canvas.getUpdateManager().getUpdateRunnableQueue().
    invokeLater(new Runnable() {
       // Insert some actions on the DOM here
    });

- or -

// Waits until the Runnable is invoked
canvas.getUpdateManager().getUpdateRunnableQueue().
    invokeAndWait(new Runnable() {
       // Insert some actions on the DOM here
    });
</source>
    <p>
    Like with event listeners, when a Runnable is invoked from the update
    thread the graphics are updated.
    </p>
    </s1>
  </body>
</document>
